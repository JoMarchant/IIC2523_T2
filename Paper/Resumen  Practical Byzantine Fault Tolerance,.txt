1.Introducción
Ataques cibernéticos son cada vez más frecuentes, lo que puede traer como consecuencia a las fallas bizantinas (fallas donde nodos muestran un comportamiento aleatorio). En este paper, se propone un algoritmo que tolera estas fallas y que además logra hacerlo práctico y en un ambiente asíncrono. Estos dos requisitos no se habían visto en un solo sistema, y por lo tanto, tienen sus propias fallas. 
2.System Model
En el sistema se asume que los mensajes que manda cada nodo se pueden perder, atrasar, mandar duplicados o mandar fuera de orden, pero las fallas de los nodos serán independientes. Esto lo logran corriendo diferentes implementaciones de código en diferentes sistemas operativos. Además, se usa criptografía para firmar mensajes para que no se puedan falsificar mensajes por cualquier nodo. Un detalle que sí se toma en cuenta es que puede existir un nodo que pueda retrasar mensajes, pero se asume que no lo puede hacer indefinidamente. 
3. Service Properties
El algoritmo puede ser usado para cualquier servicio, no solo a uno que hace lecturas y escrituras. Para proporcionar seguridad (que las ejecuciones que realiza son atómicas y una después de la otra) si es que a lo más de (n-1)/3 de las replicas están malas. Las réplicas son capaces de hacer daño, pero los clientes podrán observar esto y pararlos. Se puede controlar el acceso a ciertos datos, pidiendo autenticación (con también la posibilidad de quitarle el permiso a alguien). El algoritmo proporciona liveliness (que los clientes recibirán los mensajes) solo si a lo más hay (n-1)/3 replicas malos (y no hay un delay indefinido). Lo que el algoritmo no puede solucionar es cuando las réplicas malas difunden información privada. 
4.The Algorithm

5.Optimizations

6.Implementations

7.Performance Evaluations

8.Related Work

9.Conclusions
